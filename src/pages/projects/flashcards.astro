---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro'
import Footer from '../../components/Footer.astro';
import "../../styles/navigation.css"

import capitalData from './example-data/countries'

const examples = [
	{
		title: "English vocabulary",
		content: [{"front": "TODO", "back": "todo, check out world capitals"}]
	},
	{
		title: "World capitals",
		content: capitalData
	},
	{
		title: "Chemical elements",
		content: [{"front": "TODO", "back": "todo, check out world capitals"}]
	}
]

export const title = "Flashcards"
---

<Layout title={title}>
	<div id="background" class="alt">
		<main>
			<Header />

			<h1>{title}</h1>

			<section>

				<nav>
					<label class="button" for="import" title="Import file">
						<img src="/icons/import.svg" />
					</label>
					<input type="file" id="import" style="display:none;" ></input>

					<button class="button" id="export">
						<img src="/icons/export.svg" />
					</button>

					<span style="flex-grow: 1;" />

					<button class="button alt" id="show_editor" title="Export file">Editor</button>	
				</nav>

				<div id="flashcards" class="ui">
					<button id="back">
						<img src="/icons/previous.svg" />
					</button>
					<div class="content">
						<span id="indexText">0 out of 0</span>
						<span id="front"></span>
					</div>
					<button id="next">
						<img src="/icons/previous.svg" />
					</button>
				</div>

				<div id="editor">

					<nav>
						<h2>Editor</h2>

						<span style="flex-grow: 1;" />

						<button class="button green" id="add_flashcard">Add</button>
					</nav>

					<table>
						<tr>
							<th>Index</th>
							<th>Front</th>
							<th>Back</th>
							<th></th>
						</tr>
						<tbody id="editor_table"></tbody>
					</table>

					<h2>Settings</h2>

					<input type="checkbox" id="cover" name="cover" checked />
					<label for="cover">Auto cover on next question</label> <br />
					<input type="checkbox" id="shuffle" name="shuffle" checked />
					<label for="shuffle">Shuffle questions on load</label>

					<h2>Templates</h2>

					<section id="examples"></section>
				</div>
	
				<button id="swap">
					<img src="/icons/swap.svg" />
				</button>	

			</section>


			<Footer />

		</main>
	</div>
</Layout>

<style>

	nav > h2 {
		margin: 0;
	}
	
	#editor {
		margin: 4em 0;
	}

	#editor table {
		width: 100%;
		border-collapse: collapse;
		margin: 2em 0;
		table-layout: auto;
	}

	th {
		background-color: rgba(var(--primary), 0.2);
		padding: 8px;
		border: 2px rgb(var(--background)) solid;
	}

	th:first-child {
		border-top-left-radius: 0.4em;
		border-bottom-left-radius: 0.4em;
		border-left: 0px;
	}

	th:last-child {
		border-top-right-radius: 0.4em;
		border-bottom-right-radius: 0.4em;
		border-right: 0px;
	}

	.ui {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin: 8em 0;
	}

	.ui > button {
		padding: 0.8em;
		border-radius: 50%;
		border: 0;
		background-color: rgba(var(--primary), 0.2);
		font-size: 2em;
		cursor: pointer;
		display: flex;
	}

	.ui > button:hover, #swap:hover {
		opacity: 0.9;
	}

	.ui > button:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}

	.content {
		display: flex;
		flex-direction: column;
		align-items: center;
		min-height: 8em;
	}

	#front {
		font-size: 1.8em;
		margin: 0 1em;
		text-align: center;
	}
	
	#indexText {
		font-weight: 600;
		color: rgba(var(--text), 0.5);
	}

	#swap {
		display: flex;
		margin: 4em auto;
		cursor: pointer;

		border-radius: 4em;
		border: 0;
		background-color: rgba(var(--primary), 0.2);
		padding: 1em 4em;
		font-size: 1.2em;
	}

	#next > img {
		transform: rotate(180deg);
	}

</style>

<!-- Flashcard Handler, Input, Output, Swapping, Moving -->
<script define:vars={{ examples }}>

	function shuffle(array) {
		let currentIndex = array.length;

		while (currentIndex != 0) {

			let randomIndex = Math.floor(Math.random() * currentIndex);
			currentIndex--;

			[array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];

		}
	}

	let displayData = {
		title: "My new flashcard",
		thumbnail: "",
		content: [{
			front: "Import new data,",
			back: "or use the editor.",
		}]
	}

	let importData = displayData;

	document.addEventListener("DOMContentLoaded", function() {

		const autoShuffle = document.getElementById("shuffle");
		const autoCheck = document.getElementById("cover");
		
		const importElement = document.getElementById("import");
		const exportElement = document.getElementById("export");

		const showEditorElement = document.getElementById("show_editor");
		const editorElement = document.getElementById("editor");
		const tableElement = document.getElementById("editor_table");
		const flashcardsElement = document.getElementById("flashcards");

		const backButton = document.getElementById("back");
		const nextButton = document.getElementById("next");
		const swapButton = document.getElementById("swap");
		const addButton = document.getElementById("add_flashcard");
	
		const contentPage = document.getElementById("front");
		const indexText = document.getElementById("indexText");

		function updateData(content) {
			importData = JSON.parse(content);
			displayData = JSON.parse(content);

			if (displayData.content.length < 1) {
				alert("Invalid flashcard, no flashcards found!")
				return;
			}

			if (autoShuffle) shuffle(displayData.content);
			
			index = 0;
			maxIndex = displayData.content.length;

			populateTable();
			updateIndex(1);
		}

		importElement.addEventListener("change", (event) => {
			const inputFile = event.targetMLInputElement;

			if (inputFile.files && inputFile.files[0]) {
				const file = inputFile.files[0];
				const reader = new FileReader();

				reader.onload = function(e) {

					if (e.target) {

						const fileContent = e.target.result;
						updateData(fileContent);

					}

				};

				reader.readAsText(file);
			}
		});

		exportElement.addEventListener("click", () => {

			const jsonData = JSON.stringify(importData);
			const blob = new Blob([jsonData], { type: "application/json" });
			const url = URL.createObjectURL(blob);

			const a = document.createElement("a");
			a.href = url;
			a.download = "data.json";
			document.body.appendChild(a);
			a.click();

			document.body.removeChild(a);
			URL.revokeObjectURL(url);

		});

		let index = 1; // Current index
		let minIndex = 1;
		let maxIndex = displayData.content.length;
		let isFront = true;

		function swap() {
			isFront = !isFront;
			updateContent();
		}

		function updateContent() {
			contentPage.innerText = displayData.content[index - 1][isFront ? "front" : "back"];
		}

		function updateIndexText() {
			indexText.innerText = `${index} out of ${maxIndex}`;
		}

		function updateButtonStates() {
			backButton.disabled = index === minIndex;
			nextButton.disabled = index === maxIndex;
		}

		backButton.addEventListener("click", () => updateIndex(-1) );
		nextButton.addEventListener("click", () => updateIndex(1) );
		swapButton.addEventListener("click", swap);

		document.addEventListener("keydown", function(event) {

			switch (event.code) {
				case "ArrowUp":
					swap();
					break;
				case "ArrowLeft":
					updateIndex(-1);
					break;
				case "ArrowRight":
					updateIndex(1);
					break;
				default:
					break;
			}

		});

		function updateIndex(delta) {
			
			const isValidDelta = (delta === -1 && index > minIndex) || 
                        		 (delta === 1 && index < maxIndex) ||
                        		 (delta === 0);


			if (!isValidDelta) {
        		return;
    		}

			index += delta;

			updateIndexText();
    		updateButtonStates();

			isFront = autoCheck.checked || isFront;
			updateContent();

		}

		updateIndex(0);

		const examplesGrid = document.getElementById("examples");

		examples.map(( flashcard ) => {
			const div = document.createElement("div");
			const p = document.createElement("p");
			const span = document.createElement("span");

			p.textContent = flashcard.title;
			span.textContent = "Click to load";

			div.appendChild(p);
			div.appendChild(span);

			div.addEventListener("click", () => {
				updateData(JSON.stringify(flashcard));
			});

			examplesGrid.appendChild(div);
		});

		// ----------[ EDITOR ]--------------

		let isOpen = false;
		editorElement.style.display = "none";

		showEditorElement.addEventListener("click", () => {
			isOpen = !isOpen;

			flashcardsElement.style.display = isOpen ? "none" : "flex";
			swapButton.style.display = isOpen ? "none" : "flex";
			editorElement.style.display = isOpen ? "block" : "none";
		});

		const clearTable = () => {
			while (tableElement.firstChild) {
				tableElement.removeChild(tableElement.firstChild);
			}
		};

		const addFlashcardRow = () => {
			importData.content.push({ front: "", back: "" });
			maxIndex += 1
			populateTable();
			updateIndex(0);
		};

		const removeFlashcardRow = (index) => {
			importData.content.splice(index, 1);
			maxIndex -= 1
			populateTable();
			updateIndex(0);
		};

		addButton.addEventListener("click", addFlashcardRow);

		const generateInputCell = (value, property, index) => {
			const cell = document.createElement("td");
			const input = document.createElement("input");

			input.type = "text";
			input.value = value;
			input.addEventListener("input", (event) => {
				if (event.target) {
					const target = event.target;
					importData.content[index][property] = target.value;
				}
			});

			cell.appendChild(input);
			return cell;
		};


		const populateTable = () => {
			clearTable();
			importData.content.forEach((flashcard, index) => {
				const row = document.createElement("tr");

				const indexCell = document.createElement("td");

				indexCell.textContent = (index + 1).toString();
				row.appendChild(indexCell);

				const frontCell = generateInputCell(flashcard.front, "front", index);
				row.appendChild(frontCell);

				const backCell = generateInputCell(flashcard.back, "back", index);
				row.appendChild(backCell);

				const deleteButtonCell = document.createElement("td");
				deleteButtonCell.classList.add("remove")

				const deleteButton = document.createElement("div");

				const imageDeleteElement = document.createElement("img");
				imageDeleteElement.src = "/icons/trash.svg";
				
				deleteButton.appendChild(imageDeleteElement)
				deleteButtonCell.addEventListener("click", () => removeFlashcardRow(index));
				deleteButtonCell.appendChild(deleteButton);
				row.appendChild(deleteButtonCell);

				tableElement.appendChild(row);

				displayData.content = JSON.parse(JSON.stringify(importData.content));
				if (autoShuffle) shuffle(displayData.content);
			});

		};

		populateTable();

	});

</script>

<style is:inline>
	#examples {
		display: grid;
		grid-template-columns: repeat(auto-fill,minmax(240px, 1fr));
		gap: 1em;
	}

	#examples > div {
		background-color: rgba(var(--primary), 0.1);
		border-radius: 0.2em;

		display: flex;
		flex-direction: column;
		cursor: pointer;
	}

	#examples > div:hover {
		opacity: 0.8;
	}

	#examples > div > p {
		padding: 1em;
		text-align: center;
	}


	#examples > div > span {
		padding: 0.5em;
		background-color: rgb(var(--primary));
		color: rgb(var(--background));
		font-weight: 500;
		text-align: center;
		border-radius: 0 0 0.2em 0.2em;
	}

	td {
		text-align: left;
		padding: 8px;
	}
	
	td.remove {
		background-color: rgba(255, 19, 19, 0.5);
		border-radius: 0.4em;
		border: 2px rgb(var(--background)) solid;
		cursor: pointer;
	}

	td.remove:hover {
		opacity: 0.8;
		border-radius: 0.2em;
	}
	
	td.remove > div {
		display: flex;
		align-items: center;
		justify-content: center;
	}

	td input {
		background-color: transparent;
		width: 100%;
		border: 0;
		font-size: inherit;
		color: inherit;
		font-family: inherit;
	}
</style>